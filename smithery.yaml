name: stealthmole-search
version: 0.9.0
description: "StealthMole MCP 서버 - 고급 위협 인텔리전스 및 다크웹 모니터링 도구 / StealthMole MCP Server - Advanced threat intelligence and dark web monitoring tools"
author: StealthMole Team
repository: https://github.com/cjinzy/mole-mcp-server
license: MIT
# Smithery configuration file: https://smithery.ai/docs/config#smitheryyaml

startCommand:
  type: stdio
  configSchema:
    # JSON Schema defining the configuration options for the MCP.
    type: object
    properties:
      STEALTHMOLE_ACCESS_KEY:
        type: string
        description: "StealthMole API Access Key"
      STEALTHMOLE_SECRET_KEY:
        type: string
        description: "StealthMole API Secret Key"
    required:
      - STEALTHMOLE_ACCESS_KEY
      - STEALTHMOLE_SECRET_KEY
  commandFunction:
    # A JS function that produces the CLI command based on the given config to start the MCP on stdio.
    |-
    (config) => ({
      command: 'python',
      args: ['-m', 'stealthmole_mcp.server'],
      env: {
        STEALTHMOLE_ACCESS_KEY: config.STEALTHMOLE_ACCESS_KEY,
        STEALTHMOLE_SECRET_KEY: config.STEALTHMOLE_SECRET_KEY
      }
    })
  exampleConfig:
    STEALTHMOLE_ACCESS_KEY: "your-access-key"
    STEALTHMOLE_SECRET_KEY: "your-secret-key"

buildCommand:
  type: docker
  dockerfilePath: ./Dockerfile

runtime:
  type: mcp
  transport: stdio

environment:
  STEALTHMOLE_ACCESS_KEY:
    description: "StealthMole API Access Key"
    required: true
  STEALTHMOLE_SECRET_KEY:
    description: "StealthMole API Secret Key"
    required: true

capabilities:
  tools:
    - name: search_darkweb
      description: "Search dark web content for various indicators"
      inputSchema:
        type: object
        properties:
          query:
            type: string
            description: "Search query"
        required:
          - query
    - name: search_telegram
      description: "Search Telegram content for indicators"
      inputSchema:
        type: object
        properties:
          query:
            type: string
            description: "Search query"
        required:
          - query
    - name: search_credentials
      description: "Search for leaked credentials"
      inputSchema:
        type: object
        properties:
          email:
            type: string
            description: "Email address to search"
        required:
          - email
    - name: search_ransomware
      description: "Search ransomware victim data"
      inputSchema:
        type: object
        properties:
          query:
            type: string
            description: "Organization or domain to search"
        required:
          - query
    - name: search_compromised_dataset
      description: "Search compromised data sets"
      inputSchema:
        type: object
        properties:
          query:
            type: string
            description: "Search query"
        required:
          - query
    - name: search_combo_binder
      description: "Search combo/credential binding data"
      inputSchema:
        type: object
        properties:
          query:
            type: string
            description: "Search query"
        required:
          - query
    - name: search_ulp_binder
      description: "Search URL-Login-Password combinations"
      inputSchema:
        type: object
        properties:
          query:
            type: string
            description: "Search query"
        required:
          - query
    - name: search_government_monitoring
      description: "Search government sector threat monitoring"
      inputSchema:
        type: object
        properties:
          query:
            type: string
            description: "Search query"
        required:
          - query
    - name: search_leaked_monitoring
      description: "Search leaked monitoring data"
      inputSchema:
        type: object
        properties:
          query:
            type: string
            description: "Search query"
        required:
          - query
    - name: get_node_details
      description: "Get detailed information about a specific node"
      inputSchema:
        type: object
        properties:
          node_id:
            type: string
            description: "Node ID"
        required:
          - node_id
    - name: get_compromised_dataset_node
      description: "Get detailed compromised data set node information"
      inputSchema:
        type: object
        properties:
          node_id:
            type: string
            description: "Node ID"
        required:
          - node_id
    - name: get_user_quotas
      description: "Get API usage quotas"
      inputSchema:
        type: object
        properties: {}
    - name: get_targets
      description: "Get available search targets"
      inputSchema:
        type: object
        properties: {}
    - name: export_data
      description: "Export search results in various formats"
      inputSchema:
        type: object
        properties:
          search_id:
            type: string
            description: "Search ID"
          format:
            type: string
            enum: ["csv", "json"]
            description: "Export format"
        required:
          - search_id
          - format
    - name: export_compromised_dataset
      description: "Export compromised data set as CSV/JSON"
      inputSchema:
        type: object
        properties:
          search_id:
            type: string
            description: "Search ID"
          format:
            type: string
            enum: ["csv", "json"]
            description: "Export format"
        required:
          - search_id
          - format
    - name: export_combo_binder
      description: "Export combo binder data as CSV/JSON"
      inputSchema:
        type: object
        properties:
          search_id:
            type: string
            description: "Search ID"
          format:
            type: string
            enum: ["csv", "json"]
            description: "Export format"
        required:
          - search_id
          - format
    - name: export_ulp_binder
      description: "Export ULP binder data as CSV/JSON"
      inputSchema:
        type: object
        properties:
          search_id:
            type: string
            description: "Search ID"
          format:
            type: string
            enum: ["csv", "json"]
            description: "Export format"
        required:
          - search_id
          - format
    - name: download_file
      description: "Download file by hash from dt or tt service"
      inputSchema:
        type: object
        properties:
          hash:
            type: string
            description: "File hash"
          service:
            type: string
            enum: ["dt", "tt"]
            description: "Service to download from"
        required:
          - hash
          - service
    - name: search_pagination
      description: "Pagination search using search ID"
      inputSchema:
        type: object
        properties:
          search_id:
            type: string
            description: "Search ID"
          page:
            type: integer
            description: "Page number"
        required:
          - search_id
          - page
